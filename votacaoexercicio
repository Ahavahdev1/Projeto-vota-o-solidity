// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

struct Voting {
    string[] options;
    mapping(uint => uint) votes;
    uint maxDate;
}

struct Vote {
    uint choice;
    uint date;
}

struct Participant {
    string name;
    string imageUrl;
    uint age;
    uint chosenOption;
}

contract wEBBB3 {
    address public owner;
    uint public currentVoting = 0;
    Voting[] public votings;
    mapping(uint => mapping(address => Vote)) public votes;
    mapping(address => Participant) public participants;
    uint public constant MAX_PARTICIPANTS = 4;
    uint public totalParticipants;

    constructor() {
        owner = msg.sender;

        addParticipant(address(0x1111111111111111111111111111111111111111), "Participant1", "url1", 25);
        addParticipant(address(0x2222222222222222222222222222222222222222), "Participant2", "url2", 30);
        addParticipant(address(0x3333333333333333333333333333333333333333), "Participant3", "url3", 28);
        addParticipant(address(0x4444444444444444444444444444444444444444), "Participant4", "url4", 22);
    }

    function getCurrentVoting() public view returns (string[] memory, uint) {
        return (votings[currentVoting].options, votings[currentVoting].maxDate);
    }

    function addVoting(string[] memory options, uint timeToVote) public {
    require(msg.sender == owner, "Invalid sender");

    if (currentVoting != 0) currentVoting++;

    Voting storage newVoting = votings[currentVoting];
    newVoting.options = options;
    newVoting.maxDate = timeToVote + block.timestamp;

    for (uint i = 0; i < options.length; i++) {
        newVoting.votes[i] = 0;
    }
}

    function addVote(uint chosenOption) public {
        (string[] memory options, uint maxDate) = getCurrentVoting();

        require(chosenOption < options.length, "Invalid chosen option");
        require(maxDate > block.timestamp, "No open voting");
        require(votes[currentVoting][msg.sender].date == 0, "You already voted on this voting");

        require(block.timestamp - votes[currentVoting][msg.sender].date >= 1 hours, "You can vote only once per hour");

        votes[currentVoting][msg.sender] = Vote(chosenOption, block.timestamp);

        votings[currentVoting].votes[chosenOption]++;
        participants[msg.sender].chosenOption = chosenOption;
    }

    function addParticipant(address participantAddress, string memory name, string memory imageUrl, uint age) public {
        require(msg.sender == owner, "Only the owner can add participants");
        require(totalParticipants < MAX_PARTICIPANTS, "Maximum number of participants reached");

        Participant storage newParticipant = participants[participantAddress];
        newParticipant.name = name;
        newParticipant.imageUrl = imageUrl;
        newParticipant.age = age;

        totalParticipants++;
    }

    function transferOwnership(address newOwner) public {
        require(msg.sender == owner, "Only the owner can transfer ownership");
        owner = newOwner;
    }
}
